import pandas 
import numpy as np
data_dict = {}

# Open the file, preface file path with r as \users\ is read as code and r forces it to be read explicitly
with open(r"C:\Users\t09ms23\Desktop\BT5511 Files\Ah3_data_file.txt", 'r') as file:
    # Read the first line containing keys
    keys_line = file.readline().strip().split()

    # Read the second line containing values
    values_line = file.readline().strip().split()

    # Ensure the number of keys matches the number of values
    if len(keys_line) == len(values_line):
        # Combine keys and values into dictionary
        for key, value in zip(keys_line, values_line):
            data_dict[key.strip()] = value.strip()
    else:
        print("Error: Number of keys does not match number of values.")

# Format the output as desired
output = ' '.join([f"{key}[{data_dict[key]}]" for key in data_dict])
print(output)

df = pandas.DataFrame.from_dict(data_dict, orient='index', columns=['Value'])
df.index.name = 'Key'
print(df)

#select both the WT and Mut sequence for slicing
sliced_rows = df[1:3]
print("Sliced Rows:")
print(sliced_rows)

#Select sequences from the dict and create them as variables 
WildType_Sequence, Mutant_Sequence = data_dict['WildType.Sequence'], data_dict['Mutant.Sequence']
#Combine these two variables into a list/s (?) which can be called as one 
dna_seqs = [WildType_Sequence, Mutant_Sequence]
print(dna_seqs)
#Check the length of the sequence 
len(dna_seqs[0]) 
#Create an array based on this with all zeros 
dna_array = np.zeros((1, 2, 1456))
dna_array

#compare the two sequences with threshold=np.inf to show the entire array 
seq1_array = np.array(list(dna_seqs[0]))
seq2_array = np.array(list(dna_seqs[1]))
comparison_array = (seq1_array == seq2_array).astype(int)
np.set_printoptions(threshold=np.inf)
print(comparison_array)

#we then will identify mutations and the type if present. It stores this type of mutation as the variable mutation_type 
def find_mutation_type(WildType_Sequence, Mutant_Sequence):
    if len(WildType_Sequence) == len(Mutant_Sequence):
        if WildType_Sequence == Mutant_Sequence:
            return "No mutation"
        else:
            return "Substitution"
    elif len(WildType_Sequence) < len(Mutant_Sequence):
        if Mutant_Sequence.startswith(WildType_Sequence):
            return "Insertion"
        else:
            return "Complex mutation (insertion and/or substitution)"
    else:
        if WildType_Sequence.startswith(Mutant_Sequence):
            return "Deletion"
        else:
            return "Complex mutation (deletion and/or substitution)"
        
mutation_type = find_mutation_type(WildType_Sequence, Mutant_Sequence)
print("Mutation type:", mutation_type)
