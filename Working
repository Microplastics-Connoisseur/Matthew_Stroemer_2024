import pandas 
import numpy as np
data_dict = {}

# Open the file, preface file path with r as \users\ is read as code and r forces it to be read explicitly
with open(r"C:\Users\t09ms23\Desktop\BT5511 Files\Ah3_data_file.txt", 'r') as file:
    # Read the first line containing keys
    keys_line = file.readline().strip().split()

    # Read the second line containing values
    values_line = file.readline().strip().split()

    # Ensure the number of keys matches the number of values
    if len(keys_line) == len(values_line):
        # Combine keys and values into dictionary
        for key, value in zip(keys_line, values_line):
            data_dict[key.strip()] = value.strip()
    else:
        print("Error: Number of keys does not match number of values.")

# Format the output as desired
output = ' '.join([f"{key}[{data_dict[key]}]" for key in data_dict])
print(output)

df = pandas.DataFrame.from_dict(data_dict, orient='index', columns=['Value'])
df.index.name = 'Key'
print(df)

#select both the WT and Mut sequence for slicing
sliced_rows = df[1:3]
print("Sliced Rows:")
print(sliced_rows)

#Select sequences from the dict and create them as variables 
WildType_Sequence, Mutant_Sequence = data_dict['WildType.Sequence'], data_dict['Mutant.Sequence']
#Combine these two variables into a list/s (?) which can be called as one 
dna_seqs = [WildType_Sequence, Mutant_Sequence]
print(dna_seqs)
#Check the length of the sequence 
len(dna_seqs[0]) 
#Create an array based on this with all zeros 
dna_array = np.zeros((1, 2, 1456))
dna_array

#compare the two sequences with threshold=np.inf to show the entire array 
seq1_array = np.array(list(dna_seqs[0]))
seq2_array = np.array(list(dna_seqs[1]))
comparison_array = (seq1_array == seq2_array).astype(int)
np.set_printoptions(threshold=np.inf)
print(comparison_array)

#we then will identify mutations and the type if present. It stores this type of mutation as the variable mutation_type 
def find_mutation_type(WildType_Sequence, Mutant_Sequence):
    if len(WildType_Sequence) == len(Mutant_Sequence):
        if WildType_Sequence == Mutant_Sequence:
            return "No mutation"
        else:
            return "Substitution"
    elif len(WildType_Sequence) < len(Mutant_Sequence):
        if Mutant_Sequence.startswith(WildType_Sequence):
            return "Insertion"
        else:
            return "Complex mutation (insertion and/or substitution)"
    else:
        if WildType_Sequence.startswith(Mutant_Sequence):
            return "Deletion"
        else:
            return "Complex mutation (deletion and/or substitution)"
        
mutation_type = find_mutation_type(WildType_Sequence, Mutant_Sequence)
print("Mutation type:", mutation_type)

#the following averages the mRNA expression for wild type and mutant, saving them as variables and then subtracting the latter from the former andsaving it as the variable Change_mRNA
filtered_rows = df[df.index.str.contains("mRNA.Expression.WT.Rep1|mRNA.Expression.WT.Rep2|mRNA.Expression.WT.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_WT_mRNA = filtered_rows_copy['Value'].mean()

print("Average mRNA Expression WT:")
print(average_WT_mRNA)

filtered_rows = df[df.index.str.contains("mRNA.Expression.Mut.Rep1|mRNA.Expression.Mut.Rep2|mRNA.Expression.Mut.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_Mut_mRNA = filtered_rows_copy['Value'].mean()

print("Average mRNA Expression Mut:")
print(average_Mut_mRNA)

Change_mRNA = average_WT_mRNA - average_Mut_mRNA
print(Change_mRNA)

#the following averages the protein expression for wild type and mutant, saving them as variables and then subtracting the latter from the former andsaving it as the variable Change_Protein
filtered_rows = df[df.index.str.contains("Protein.Expression.WT.Rep1|Protein.Expression.WT.Rep2|Protein.Expression.WT.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_WT_Protein = filtered_rows_copy['Value'].mean()

print("Average Protein Expression WT:")
print(average_WT_Protein)

filtered_rows = df[df.index.str.contains("Protein.Expression.Mut.Rep1|Protein.Expression.Mut.Rep2|Protein.Expression.Mut.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_Mut_Protein = filtered_rows_copy['Value'].mean()

print("Average Protein Expression Mut:")
print(average_Mut_Protein)

Change_Protein = average_WT_Protein - average_Mut_Protein
print(Change_Protein)

#the following averages the cell viability for wild type and mutant, saving them as variables and then subtracting the latter from the former andsaving it as the variable Change_CellViability
filtered_rows = df[df.index.str.contains("CellViability.WT.Rep1|CellViability.WT.Rep2|CellViability.WT.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_WT_CellViability = filtered_rows_copy['Value'].mean()

print("Average Cell Viability WT:")
print(average_WT_CellViability)

filtered_rows = df[df.index.str.contains("CellViability.Mut.Rep1|CellViability.Mut.Rep2|CellViability.Mut.Rep3")]
filtered_rows_copy = filtered_rows.copy()
filtered_rows_copy.loc[:, 'Value'] = pandas.to_numeric(filtered_rows_copy['Value'])

average_Mut_CellViability = filtered_rows_copy['Value'].mean()

print("Average Cell Viability Mut:")
print(average_Mut_CellViability)

Change_CellViability = average_WT_CellViability - average_Mut_CellViability
print(Change_CellViability)

#We then create a new dictionary for these changes 
changes_dict = {'Mutation Type': mutation_type, 'Change in mRNA expression': Change_mRNA, 'Change in protein expression': Change_Protein, 'Change in cell viability': Change_CellViability}
print(changes_dict)

#we convert our new dict "changes_dict" into a new dataframe and specify it with a different name

dfchanges = pandas.DataFrame.from_dict(changes_dict, orient='index')
print(dfchanges)

#######################################################################
#set 2
#instead of doing this manually one at a time, lets combine all the files into one dataframe
#first we import glob (?) and create an empty dict
import pandas 
import glob 
pandas.set_option('display.max_rows', None)
pandas.set_option('display.max_columns', None)
data_dict = {}
#next we combine all the files into one dict
txt_files = glob.glob(r"C:\Users\t09ms23\Desktop\BT5511 Files\*.txt")
for file in txt_files: 
    df = pandas.read_csv(file, delimiter=' ')
    file_name = file.split('\\')[-1].split('.')[0]
    data_dict[file_name] = df
print(data_dict)
#then we import this dict into a data frame 
combined_df = pandas.concat(data_dict, keys=data_dict.keys())
print(combined_df)
#######################################################################

